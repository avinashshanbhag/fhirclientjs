/**
 * 
 */
package org.avinash.fhirclientjs.authorization.authorizationcode;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.Validate;
import org.avinash.fhirclientjs.client.HeaderInterceptor;
import org.avinash.fhirclientjs.util.FhirAuthorizationCodeUtils;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.model.api.ExtensionDt;
import ca.uhn.fhir.model.dstu2.resource.Conformance;
import ca.uhn.fhir.rest.client.IGenericClient;

/**
 * This class will build the <i>AuthorizationCodeRequest</i> from the FHIR Server URL
 * 
 * 
 * @author ashanbhag
 *
 */
public class AuthorizationCoderRequestBuilder {
	
	
	private String fhirURL = null;
	private String authorize_url = null;
	private String token_url = null;
	private FhirContext ctx = null;
	
	
	/**
	 * @return the fhirURL
	 */
	public String getFhirURL() {
		return fhirURL;
	}

	/**
	 * @param fhirURL the fhirURL to set
	 */
	public void setFhirURL(String fhirURL) {
		this.fhirURL = fhirURL;
	}



	/**
	 * CTOR
	 */
	public AuthorizationCoderRequestBuilder(FhirContext fhirContext, String fhirURL)
	{
		this.fhirURL = fhirURL;
		this.ctx = fhirContext;
	}
	
	
	
	/**
	 * @param state 		The unique ID generated by the Client Session
	 * @param client_id 	The unique client id of the app obtained during registration w/ the FHIR server
	 * @param launch		The opaque launch string obtained from EHR during launch sequence
	 * @return instance of <i>AuthorizationCodeRequest</i> class to call authorization URL
	 * 
	 */
	
	public AuthorizationCodeRequest buildAuthorizationCodeRequest(String state, String client_id, 
			String launch)
	{
		
		AuthorizationCodeRequest authCodeRequest = null;

		Validate.notNull(this.fhirURL, "FHIR URL should not be null!");
		Validate.notNull(state, "Client State should not be null!");
		Validate.notNull(client_id, "Client id should not be null!");
		Validate.notNull(this.ctx, "Fhir Context cannot be null!");
		
		// Get Authorize and token URL
		getAuthorizationURLs();
		
		
		
		
		
		if (this.authorize_url != null && this.authorize_url.length() > 0 &&
			this.token_url != null && this.token_url.length() >0 )
		{
			authCodeRequest = new AuthorizationCodeRequest();
			
			authCodeRequest.setClient_id(client_id);
			authCodeRequest.setState(state);
			authCodeRequest.setLaunch(launch);
			authCodeRequest.setAud(this.fhirURL);
			authCodeRequest.setAuthorize_url(this.authorize_url);
			authCodeRequest.setToken_url(this.token_url);

			// THis will add launch scope if EHR launch
			authCodeRequest.setScope(FhirAuthorizationCodeUtils.getScope(this.fhirURL));

			/*
			if (isEHRLaunch())
			{
				// Set the launch parameter to be the value obtained from the EHR launch context.
				// For now, it is hard coded.
				authCodeRequest.setLaunch(FhirAuthorizationCodeUtils.getLaunchContext(this.fhirURL));
			}
			*/
			
		}
		else
		{
			System.out.println("Authorize and Token URLs are not available for : " + this.fhirURL);;
		}

		return (authCodeRequest);
		
	}
	
	/**
	 * 
	 * @return true if the App is launched from within EHR or false, if standalone
	 * 
	 */
	
	protected boolean isEHRLaunch()
	{
		boolean bRet = false;
		
		
		// Check if there is launch context provided.
		String launchContext = FhirAuthorizationCodeUtils.getLaunchContext(this.fhirURL);
		
		if (launchContext != null && launchContext.length() > 0)
		{
			// Launch Context has been provided. 
			bRet = true;
		}
		return (bRet);
	}
	
	

	/**
	 * This method obtains the authorize URL and token End Point from the Conformance Metadata
	 * of the FHIR Server.
	 * 
	 */
	
	private void getAuthorizationURLs()
	{
		
		// For now: Check if the information is available in the environment. If the information 
		// is not available, then only get it from conformance metadata.
		
		this.authorize_url = FhirAuthorizationCodeUtils.getAuthorizeURL(this.fhirURL);
		this.token_url = FhirAuthorizationCodeUtils.getTokenURL(this.fhirURL);
		
		if (this.authorize_url != null && this.authorize_url.length() > 0 &&
			this.token_url != null && this.token_url.length() > 0)
		{
			return;
		}
		
		else
		{
			// retrieve from conformance metadata
			getOAuthURLsFromConformanceMetadata();
		}
		
	}

	/**
	 * Get authorize URL and Token URL from Conformance profile of FHIR End point
	 * 
	 */
	protected void getOAuthURLsFromConformanceMetadata() 
	{
		// Retrieve the server's conformance statement and print its description
		// Connect to the FHIR Server
		
		IGenericClient client = this.ctx.newRestfulGenericClient(this.fhirURL);
		
		// Register Client header Interceptor with appropriate Header.
		HeaderInterceptor headerInterceptor = new HeaderInterceptor("application/json");
		
		// Register the interceptor with the client.
		client.registerInterceptor(headerInterceptor);
		
		Conformance conf = client.fetchConformance().ofType(Conformance.class).execute();
		
		// Get the Security Extension profile and find the URLs corresponding to 
		
		// authorize and token end points.
		
		Conformance.RestSecurity restSec = conf.getRestFirstRep().getSecurity();
		
		if (restSec != null)
		{
			// Get all undeclared extension
			List <ExtensionDt> extlist = restSec.getAllUndeclaredExtensions();
			if (extlist != null)
			{
				boolean bTokenURL = false;
				boolean bAuthURL = false;
				
				for (int i=-0; i < extlist.size(); i++)
				{
					ExtensionDt ext = extlist.get(i);
					
					System.out.println("Ext[" + i + "]=" + ext.getUrl());

					if (ext.getUndeclaredExtensionsByUrl("token") != null &&
						ext.getUndeclaredExtensionsByUrl("token").size() > 0)
						{
							ExtensionDt ext_token = ext.getUndeclaredExtensionsByUrl("token").get(0);
							this.token_url = ext_token.getValueAsPrimitive().getValueAsString();
							bTokenURL = true;
							System.out.println("Token URL: " + this.token_url);
							
						}
						
					if (ext.getUndeclaredExtensionsByUrl("authorize") != null &&
							ext.getUndeclaredExtensionsByUrl("authorize").size() > 0)
							{
								ExtensionDt ext_authorize = ext.getUndeclaredExtensionsByUrl("authorize").get(0);
								this.authorize_url = ext_authorize.getValueAsPrimitive().getValueAsString();
								bAuthURL = true;
								System.out.println("Auth URL: " + this.authorize_url);
								
							}
					// Break out of the loop if both the URLs (authorize and Token) are obtained
					if (bAuthURL && bTokenURL)
						break;
				}
			}
		}
	}
	
	
	
	
	

}
